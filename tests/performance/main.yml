config:
  target: "https://playground-next.test.aelf.dev"
  phases:
    - duration: 60
      arrivalRate: 5 # Start with 5 requests per second
    - duration: 120
      arrivalRate: 10 # Increase to 10 requests per second
scenarios:
  - flow:
    - post:
        url: "/api/build"
        json:
          files:
            - path: src/HelloWorld.cs
              contents: "using AElf.Sdk.CSharp;\nusing Google.Protobuf.WellKnownTypes;\n\nnamespace
                AElf.Contracts.HelloWorld\n{\n    // Contract class must inherit the base class
                generated from the proto file\n    public class HelloWorld : HelloWorldContainer.HelloWorldBase\n
                \   {\n        // A method that modifies the contract state\n        public override
                Empty Update(StringValue input)\n        {\n            // Set the message value
                in the contract state\n            State.Message.Value = input.Value;\n            //
                Emit an event to notify listeners about something happened during the execution
                of this method\n            Context.Fire(new UpdatedMessage\n            {\n                Value
                = input.Value\n            });\n            return new Empty();\n        }\n\n
                \       // A method that read the contract state\n        public override StringValue
                Read(Empty input)\n        {\n            // Retrieve the value from the state\n
                \           var value = State.Message.Value;\n            // Wrap the value in
                the return type\n            return new StringValue\n            {\n                Value
                = value\n            };\n        }\n    }\n    \n}"
            - path: src/HelloWorld.csproj
              contents: "<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <TargetFramework>net6.0</TargetFramework>\n
                \       <RootNamespace>AElf.Contracts.HelloWorld</RootNamespace>\n        <IsContract>true</IsContract>\n
                \       <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>\n    </PropertyGroup>\n
                \   <PropertyGroup>\n        <ObjPath>$(MSBuildProjectDirectory)/$(BaseIntermediateOutputPath)$(Configuration)/$(TargetFramework)/</ObjPath>\n
                \   </PropertyGroup>\n\n    <Target Name=\"ProtoGeneratedRecognition\" AfterTargets=\"CoreCompile\">\n
                \       <ItemGroup>\n            <Compile Include=\"$(ObjPath)Protobuf/**/*.cs\"
                />\n        </ItemGroup>\n    </Target>\n\n    <ItemGroup>\n        <PackageReference
                Include=\"AElf.Sdk.CSharp\" Version=\"1.5.0\" />\n        <PackageReference Include=\"AElf.Tools\"
                Version=\"1.0.2\">\n            <PrivateAssets>all</PrivateAssets>\n            <IncludeAssets>runtime;
                build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n        </PackageReference>\n
                \   </ItemGroup>\n\n</Project>\n    "
            - path: src/HelloWorldState.cs
              contents: "using AElf.Sdk.CSharp.State;\n\nnamespace AElf.Contracts.HelloWorld\n{\n
                \   // The state class is access the blockchain state\n    public class HelloWorldState
                : ContractState \n    {\n        // A state that holds string value\n        public
                StringState Message { get; set; }\n    }\n}"
            - path: src/Protobuf/contract/hello_world_contract.proto
              contents: "syntax = \"proto3\";\n\nimport \"aelf/options.proto\";\nimport \"google/protobuf/empty.proto\";\nimport
                \"google/protobuf/wrappers.proto\";\nimport \"Protobuf/reference/acs12.proto\";\n//
                The namespace of this class\noption csharp_namespace = \"AElf.Contracts.HelloWorld\";\n\nservice
                HelloWorld {\n  // The name of the state class the smart contract is going to
                use to access blockchain state\n  option (aelf.csharp_state) = \"AElf.Contracts.HelloWorld.HelloWorldState\";\n
                \ option (aelf.base) = \"Protobuf/reference/acs12.proto\";\n  \n  // Actions (methods
                that modify contract state)\n  // Stores the value in contract state\n  rpc Update
                (google.protobuf.StringValue) returns (google.protobuf.Empty) {\n  }\n\n  // Views
                (methods that don't modify contract state)\n  // Get the value stored from contract
                state\n  rpc Read (google.protobuf.Empty) returns (google.protobuf.StringValue)
                {\n    option (aelf.is_view) = true;\n  }\n}\n\n// An event that will be emitted
                from contract method call\nmessage UpdatedMessage {\n  option (aelf.is_event)
                = true;\n  string value = 1;\n}"
            - path: src/Protobuf/message/authority_info.proto
              contents: |-
                syntax = "proto3";

                import "aelf/core.proto";

                option csharp_namespace = "AElf.Contracts.HelloWorld";

                message AuthorityInfo {
                  aelf.Address contract_address = 1;
                  aelf.Address owner_address = 2;
                }
            - path: src/Protobuf/reference/acs12.proto
              contents: |-
                /**
                * AElf Standards ACS12(User Contract Standard)
                *
                * Used to manage user contract.
                */
                syntax = "proto3";

                package acs12;

                import public "aelf/options.proto";
                import public "google/protobuf/empty.proto";
                import public "google/protobuf/wrappers.proto";
                import "aelf/core.proto";

                option (aelf.identity) = "acs12";
                option csharp_namespace = "AElf.Standards.ACS12";

                service UserContract{

                }

                //Specified method fee for user contract.
                message UserContractMethodFees {
                  // List of fees to be charged.
                  repeated UserContractMethodFee fees = 2;
                  // Optional based on the implementation of SetConfiguration method.
                  bool is_size_fee_free = 3;
                }

                message UserContractMethodFee {
                  // The token symbol of the method fee.
                  string symbol = 1;
                  // The amount of fees to be charged.
                  int64 basic_fee = 2;
                }
